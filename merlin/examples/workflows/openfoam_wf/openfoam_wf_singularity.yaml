description:
    name: openfoam_wf_template
    description: |
      A parameter study that includes initializing, running,
      post-processing, collecting, learning and vizualizing OpenFOAM runs


env:
    variables:
        OUTPUT_PATH: ./openfoam_wf_output

        SCRIPTS: $(MERLIN_INFO)/scripts
        CONTAINER: docker://cfdengine/openfoam
        N_SAMPLES: 2


merlin:
    samples:
        generate:
            cmd: |
             cp -r $(SPECROOT)/scripts $(MERLIN_INFO)/

             # Generates the samples
             python $(SCRIPTS)/make_samples.py -n $(N_SAMPLES) -outfile=$(MERLIN_INFO)/samples
        file: $(MERLIN_INFO)/samples.npy
        column_labels: [LID_SPEED, VISCOSITY]
    resources:
        workers:
            nonsimworkers:
                args: -l INFO --concurrency 1
                steps: [setup, combine_outputs, learn]
            simworkers:
                args: -l INFO --concurrency 10 --prefetch-multiplier 1 -Ofair
                steps: [sim_runs]


study:
    - name: setup
      description: |
       Installs necessary python packages and imports the cavity directory
       from the singularity container
      run:
          cmd: |
           pip install -r $(SPECROOT)/requirements.txt

           echo "***** Get the Singularity Image *****"
           cd $(SPECROOT)
           if [ ! -e openfoam_latest.sif ]; then
             singularity pull $(CONTAINER)
           fi 

           # Set up the cavity directory in the MERLIN_INFO directory
           source $(SCRIPTS)/cavity_setup_singularity.sh $(MERLIN_INFO) $(CONTAINER)

          task_queue: of_sing_nonsim

    - name: sim_runs
      description: |
       Edits the Lidspeed and viscosity then runs OpenFOAM simulation
       using the icoFoam solver
      run:
          cmd: |
           cp -r $(MERLIN_INFO)/cavity cavity/
           cd cavity

           ## Edits default values for viscosity and lidspeed with
           #  values specified by samples section of the merlin block
           python $(SCRIPTS)/ofoam_replace.py -f constant/transportProperties -j '{"nu":"[0 2 -1 0 0 0 0] $(VISCOSITY)"}'
           # The ofoam_replace script cannot yet handle the dict type objects in the 0/U file
           # so the runsed script is used instead.
           #python $(SCRIPTS)/ofoam_replace.py -f 0/U -j '{"value":"uniform ($(LID_SPEED) 0 0)"}'
           cd 0
           echo "s/uniform (0 0 0)/uniform ($(LID_SPEED) 0 0)/" > sedscr
           $(SCRIPTS)/runsed U
           cd ..

           cd ..
           cp $(SCRIPTS)/run_openfoam .

           # Run the OpenFOAM container with singularity for this unique simulation
           singularity run -B $(pwd):/cavity -W /cavity $(CONTAINER) ./run_openfoam $(LID_SPEED)
          depends: [setup]
          task_queue: of_sing_sim

    - name: combine_outputs
      description: Combines the outputs of the previous step
      run:
          cmd: |
              python $(SCRIPTS)/combine_outputs.py -data $(sim_runs.workspace) -merlin_paths $(MERLIN_PATHS_ALL)
          depends: [sim_runs_*]
          task_queue: of_sing_nonsim

    - name: learn
      description: Learns the output of the openfoam simulations using input parameters
      run:
          cmd: |
              python $(SCRIPTS)/learn.py -workspace $(MERLIN_WORKSPACE)
          depends: [combine_outputs]
          task_queue: of_sing_nonsim
